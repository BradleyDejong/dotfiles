* Path configuration
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp

(use-package magit
  :ensure t)

#+END_SRC
* Evil mode
  #+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key company-active-map (kbd "C-w") 'evil-delete-backward-word)
  (define-key helm-map (kbd "C-w") 'evil-delete-backward-word)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (setq evil-leader/in-all-states 1)
    (evil-leader/set-key
      "b" 'switch-to-buffer
      )))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode))

(use-package evil-indent-textobject
  :ensure t)

  #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (helm-autoresize-mode t)
  (setq helm-Mx-fuzzy-matching t
        helm-recentf-fuzzy-match t)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z") 'helm-select-action)
  )

(use-package helm-projectile
  :ensure t
  :config
  (global-set-key (kbd "M-p") 'helm-projectile)
  (projectile-mode 1)
  )
  #+END_SRC

  #+RESULTS:
  : t
  
* File settings

** backup directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* Editor customization

** Line numbers
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :config
       (linum-relative-global-mode t))
   #+END_SRC
   
** indentation
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (define-key global-map (kbd "RET") 'newline-and-indent)
   #+END_SRC
   
** window/frame toolbars
   #+BEGIN_SRC emacs-lisp
   
     (when window-system
       (menu-bar-mode -1)
       (tool-bar-mode -1) 
       (scroll-bar-mode -1)
       (tooltip-mode -1))

   #+END_SRC

** themes

*** Solarized
#+BEGIN_SRC  emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (if (display-graphic-p)
      (load-theme 'solarized-light)
      (load-theme 'solarized-dark)))
    
  (use-package color-theme-solarized
    :ensure t)
#+END_SRC

** cursor

   #+BEGIN_SRC emacs-lisp
(setq evil-emacs-state-cursor '("red" box))
(setq evil-normal-state-cursor '("blue" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("red" bar))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
   #+END_SRC
** scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    (setq scroll-margin 5
          scroll-conservatively 9999
          scroll-step 1))
#+END_SRC

** esc always leaves things
#+BEGIN_SRC emacs-lisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC

** clean up minor mode displays
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :config
  (diminish 'visual-line-mode))

#+END_SRC

* Org mode extensions
  
** org bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

#+RESULTS:

** HTTP language for curl execution
   #+BEGIN_SRC emacs-lisp
     (use-package ob-http
       :after org
       :ensure t
       :config
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (http . t))))
   #+END_SRC
   
   
** Exporters

*** github markdown
    #+BEGIN_SRC emacs-lisp
      (use-package ox-gfm
        :after org
        :ensure t)
    #+END_SRC
    
** File locations
   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org")
     (setq org-default-notes-file (concat org-directory "/capture.org"))
   #+END_SRC
   
** Slides
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
    :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
    :ensure t)
#+END_SRC

** Capture
   #+BEGIN_SRC emacs-lisp
     (define-key global-map "\C-cc" 'org-capture)
   #+END_SRC
 
* Programming helpers
  
** Code completion

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-tooltip-align-annotations t))
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
          (use-package flycheck
            :ensure t
            :config
            (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))
            (flycheck-add-mode 'typescript-tslint 'typescript-mode)
            (flycheck-add-mode 'javascript-eslint 'js-mode))
   #+END_SRC

   #+RESULTS:
   : t
   
** Snippets
   
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (yas-reload-all)
       (add-hook 'typescript-mode-hook #'yas-minor-mode))
   #+END_SRC
   
** editor config
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

#+RESULTS:

** Prettier.io
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode)
    (add-hook 'typescript-mode-hook 'prettier-js-mode))

#+END_SRC

   
* NPM
#+BEGIN_SRC emacs-lisp
  (use-package npm-mode
    :ensure t)

#+END_SRC

#+RESULTS:

* Languages

** Java

  #+BEGIN_SRC emacs-lisp
      (use-package jdee
        :ensure t)
  #+END_SRC
  
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t)
#+END_SRC

** Web
   
*** JavaScript

    #+BEGIN_SRC emacs-lisp

      (use-package js2-mode
        :ensure t
        :interpreter (("node" . js2-mode))
        :bind (:map js2-mode-map ("C-c C-p" . js2-print-json-path))
        :mode "\\.\\(js\\|json\\)$"
        :config
        (add-hook 'js-mode-hook 'js2-minor-mode)
        (add-hook 'js-mode-hook (lambda () (flycheck-mode +1)))
        (setq js2-basic-offset 2
              js2-highlight-level 3
              js-indent-level 2
              js2-mode-show-parse-errors nil
              js2-mode-show-strict-warnings nil))
    
    #+END_SRC

    #+RESULTS:

*** Typescript
    #+BEGIN_SRC emacs-lisp
      (use-package tide
        :ensure t
        :after company)

      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled idle-change))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1)
        ;; company is an optional dependency. You have to
        ;; install it separately via package-install
        ;; `M-x package-install [ret] company`
        (company-mode +1))

          
        (add-hook 'before-save-hook 'tide-format-before-save)

        (add-hook 'typescript-mode-hook #'setup-tide-mode)

      (add-hook 'typescript-mode-hook
                (lambda ()
                  (local-set-key (kbd "C-c f") 'tide-fix)))
    #+END_SRC

    #+RESULTS:
    | (lambda nil (local-set-key (kbd C-c f) (quote tide-fix))) | (lambda nil (local-set-key (kbd C-c f) (tide-fix))) | (lambda nil (local-set-key (C-c f) (tide-fix))) | setup-tide-mode | yas-minor-mode |

*** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :ensure t
    :config
    (setq elm-format-on-save t)
    (add-hook 'elm-mode-hook (lambda () (company-mode +1)))
    (add-to-list 'company-backends 'company-elm))
#+END_SRC

#+RESULTS:
: t

    
* Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

#+RESULTS:

* Random fun stuff
  #+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode t))
  #+END_SRC
  
  
